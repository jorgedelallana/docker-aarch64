#!groovy

node {
    def imageName = 'aarch64-gitea'
    def tagName = env.GITEA_TAG  ?: 'latest'
    def branchName = env.GITEA_TAG  ? "v${GITEA_TAG}" : env.GITEA_BRANCH ?: "master"
    
    docker.withTool('docker@1.12.5') {
    docker.withServer("tcp://${DOCKER_HOSTNAME}:2375") {
    docker.withRegistry('https://registry-1.docker.io', 'dockerhub') {
            
        stage('checkout') {
            git url: 'https://github.com/atzoum/docker-aarch64.git', branch: env.AARCH64_BRANCH ?: 'master'
            sh 'git clean -dfx'
        }
        stage('build') {
            dir(imageName) {
                docker.build('gitea-build-env', '-f Dockerfile.build .').inside {
                    sh "git clone -b $branchName --depth 1 --single-branch https://github.com/go-gitea/gitea.git gitea"
                    sh 'mkdir -p ${GOPATH}/src/code.gitea.io/'
                    sh 'ln -s gitea ${GOPATH}/src/code.gitea.io/'
                    sh 'cd ${GOPATH}/src/code.gitea.io/gitea'
                    sh 'TAGS="bindata sqlite pam" make generate build'
                }
                archiveArtifacts artifacts: 'gitea/gitea'
                sh 'cp Dockerfile gitea/Dockerfile'    
                sh "docker build -t atzoum/${imageName}:${tagName} gitea/"
            }
        }
        stage('push') {
            sh """
            docker push atzoum/${imageName}:${tagName}
            """
        }
        stage('update description') {
            withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'dockerhub', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS']]) {
                def fullDescription = readFile "${imageName}/README.md"
                def token = readJson(
                    sh(
                        returnStdout: true, 
                        script: "curl -s -H \"Content-Type: application/json\" -X POST -d '{\"username\": \"${DOCKER_USER}\", \"password\": \"${DOCKER_PASS}\"}\' https://hub.docker.com/v2/users/login/")
                    ).token

                httpRequest(
                    url: "https://hub.docker.com/v2/repositories/atzoum/${imageName}/", 
                    httpMode: 'PATCH', 
                    requestBody: writeJson([full_description: fullDescription]), 
                    customHeaders: [[name: 'Content-Type', value: 'application/json'], [name: 'Authorization', value: "JWT ${token}"]], 
                    validResponseCodes: '200', 
                    consoleLogResponseBody: true)
            }
        }
    }}}
}

@NonCPS
def readJson(String input) {
  final slurper = new groovy.json.JsonSlurper()
  return new HashMap<>(slurper.parseText(input))
}

@NonCPS
def writeJson(v) {
  groovy.json.JsonOutput.toJson(v)
}
